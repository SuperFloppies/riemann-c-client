; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/var/log/riemann/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host (or (System/getenv "RIEMANN_HOST") "127.0.0.1")]
  (tcp-server {:host host
               :port (or (System/getenv "RIEMANN_TCP_PORT") 5555)})
  (udp-server {:host host
               :port (or (System/getenv "RIEMANN_UDP_PORT") 5555)})
  (ws-server  {:host host
               :port (or (System/getenv "RIEMANN_WS_PORT") 5556)})
  (tcp-server {:host host
               :port (or (System/getenv "RIEMANN_TLS_PORT") 5554)
               :tls? true
               :key (or (System/getenv "RIEMANN_TLS_KEY") "tests/etc/server.pkcs8")
               :cert (or (System/getenv "RIEMANN_TLS_CERT") "tests/etc/server.crt")
               :ca-cert (or (System/getenv "RIEMANN_TLS_CACERT") "tests/etc/cacert.pem")}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))))))
